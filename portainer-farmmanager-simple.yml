version: '3.8'

services:
  mariadb:
    image: mariadb:10.11
    container_name: farm-admin-mariadb
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=farmrootpass123
      - MYSQL_DATABASE=farmmanager
      - MYSQL_USER=farmboy
      - MYSQL_PASSWORD=farmpass123
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_INITDB_SKIP_TZINFO=1
      - MYSQL_ROOT_HOST=%
    volumes:
      - mariadb_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - farm-network
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb-file-per-table=1
      - --skip-innodb-doublewrite
      - --max_connections=1000
      - --wait_timeout=28800
      - --skip-name-resolve
      - --bind-address=0.0.0.0
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      timeout: 10s
      retries: 10
      interval: 30s
      start_period: 90s

  farm-admin:
    image: supscotty/farmboy:latest
    container_name: farm-admin
    restart: unless-stopped
    entrypoint: ["sh", "-c"]
    ports:
      - "3000:3000"
      - "5900:5900"
      - "8080:8080"
    environment:
      NODE_ENV: "production"
      PORT: "3000"
      DATABASE_URL: "mysql://farmboy:farmpass123@mariadb:3306/farmmanager?connection_limit=5&connect_timeout=60&pool_timeout=60"
      ETERNALFARM_AGENT_KEY: "P52FE7-I2G19W-C2S4R8-BQZZFP-1FADWV-V3"
      ETERNAL_API_URL: "https://api.eternalfarm.net"
      DISPLAY: ":1"
      DISCORD_WEBHOOK_URL: "${DISCORD_WEBHOOK_URL}"
      LC_ALL: "C"
      LANG: "C"
    volumes:
      - farm_data:/app/data
      - dreambot_data:/root/DreamBot
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - farm-network
    command: >
      "
        echo '[INFO] Starting Farm Manager with clean environment...' &&
        export LC_ALL=C &&
        export LANG=C &&
        echo '[INFO] Waiting for database to be fully ready...' &&
        sleep 60 &&
        echo '[INFO] Testing database connection...' &&
        while ! mysqladmin ping -h mariadb -u farmboy -pfarmpass123 --silent 2>/dev/null; do
          echo '[INFO] Database not ready, waiting 10 seconds...' &&
          sleep 10
        done &&
        echo '[OK] Database is ready!' &&
        echo '[INFO] Testing Prisma database connection...' &&
        mysql -h mariadb -u farmboy -pfarmpass123 -e 'SELECT 1' farmmanager &&
        echo '[OK] Prisma connection test passed!' &&
        cd /app &&
        echo '[INFO] Setting up Prisma...' &&
        mkdir -p prisma &&
        echo 'generator client {
          provider = \"prisma-client-js\"
          output   = \"../generated/prisma\"
        }

        datasource db {
          provider = \"mysql\"
          url      = env(\"DATABASE_URL\")
        }

        model Account {
          id              Int              @id @default(autoincrement())
          username        String           @unique
          password        String?
          email          String?
          type           String           @default(\"p2p\")
          status         String           @default(\"idle\")
          category_id    Int?
          proxy_id       Int?
          agent_id       Int?
          tutorial_status Int?             @default(0)
          otp_key        String?
          last_checked_at DateTime?
          created_at     DateTime         @default(now())
          updated_at     DateTime         @updatedAt
          agent          Agent?           @relation(fields: [agent_id], references: [id])
          category       AccountCategory? @relation(fields: [category_id], references: [id])
          proxy          Proxy?           @relation(fields: [proxy_id], references: [id])
          tasks          Task[]

          @@index([agent_id], map: \"accounts_agent_id_fkey\")
          @@index([category_id], map: \"accounts_category_id_fkey\")
          @@index([proxy_id], map: \"accounts_proxy_id_fkey\")
          @@map(\"accounts\")
        }

        model AccountCategory {
          id          Int       @id @default(autoincrement())
          name        String    @unique
          description String?
          created_at  DateTime  @default(now())
          updated_at  DateTime  @updatedAt
          accounts    Account[]

          @@map(\"account_categories\")
        }

        model Proxy {
          id          Int            @id @default(autoincrement())
          host        String
          port        Int
          username    String?
          password    String?
          type        String         @default(\"http\")
          category_id Int?
          is_active   Boolean        @default(true)
          created_at  DateTime       @default(now())
          updated_at  DateTime       @updatedAt
          accounts    Account[]
          category    ProxyCategory? @relation(fields: [category_id], references: [id])

          @@unique([host, port])
          @@index([category_id], map: \"proxies_category_id_fkey\")
          @@map(\"proxies\")
        }

        model ProxyCategory {
          id          Int      @id @default(autoincrement())
          name        String   @unique
          description String?
          created_at  DateTime @default(now())
          updated_at  DateTime @updatedAt
          proxies     Proxy[]

          @@map(\"proxy_categories\")
        }

        model Agent {
          id              Int       @id @default(autoincrement())
          name            String    @unique
          status          String    @default(\"offline\")
          last_seen       DateTime?
          ip_address      String?
          created_at      DateTime  @default(now())
          updated_at      DateTime  @updatedAt
          
          eternal_farm_id String?   @unique
          needs_sync      Boolean   @default(false)
          last_synced     DateTime?
          
          cpu_usage       Float?
          memory_usage    Float?
          disk_usage      Float?
          
          auth_key        String?
          
          accounts        Account[]
          bots            Bot[]
          tasks           Task[]

          @@map(\"agents\")
        }

        model Bot {
          id         Int      @id @default(autoincrement())
          name       String
          type       String
          version    String?
          agent_id   Int
          status     String   @default(\"idle\")
          created_at DateTime @default(now())
          updated_at DateTime @updatedAt
          agent      Agent    @relation(fields: [agent_id], references: [id], onDelete: Cascade)
          tasks      Task[]

          @@index([agent_id], map: \"bots_agent_id_fkey\")
          @@map(\"bots\")
        }

        model Task {
          id            Int       @id @default(autoincrement())
          name          String
          script        String
          account_id    Int?
          agent_id      Int?
          bot_id        Int?
          status        String    @default(\"pending\")
          priority      Int       @default(0)
          scheduled_at  DateTime?
          started_at    DateTime?
          completed_at  DateTime?
          error_message String?   @db.Text
          result_data   String?   @db.LongText
          created_at    DateTime  @default(now())
          updated_at    DateTime  @updatedAt
          account       Account?  @relation(fields: [account_id], references: [id])
          agent         Agent?    @relation(fields: [agent_id], references: [id])
          bot           Bot?      @relation(fields: [bot_id], references: [id])

          @@index([account_id], map: \"tasks_account_id_fkey\")
          @@index([agent_id], map: \"tasks_agent_id_fkey\")
          @@index([bot_id], map: \"tasks_bot_id_fkey\")
          @@map(\"tasks\")
        }

        model PrimeLinkRequest {
          id           Int       @id @default(autoincrement())
          account_id   Int
          status       String    @default(\"pending\")
          requested_at DateTime  @default(now())
          processed_at DateTime?
          notes        String?   @db.Text

          @@map(\"prime_link_requests\")
        }' > prisma/schema.prisma &&
        echo '[INFO] Running Prisma migrations...' &&
        npx prisma migrate deploy &&
        echo '[INFO] Generating Prisma client...' &&
        npx prisma generate &&
        echo '[INFO] Starting application...' &&
        node server.js
      "

volumes:
  farm_data:
    driver: local
  dreambot_data:
    driver: local
  mariadb_data:
    driver: local

networks:
  farm-network:
    driver: bridge 